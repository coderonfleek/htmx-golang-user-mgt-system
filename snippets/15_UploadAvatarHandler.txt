func UploadAvatarHandler(db *sql.DB, tmpl *template.Template, store *sessions.CookieStore) http.HandlerFunc {

	return func(w http.ResponseWriter, r *http.Request) {

		user, userID := CheckLoggedIn(w, r, store, db)

		// Initialize error messages slice
		var errorMessages []string

		// Parse the multipart form, 10 MB max upload size
		r.ParseMultipartForm(10 << 20)

		// Retrieve the file from form data
		file, handler, err := r.FormFile("avatar")
		if err != nil {
			if err == http.ErrMissingFile {
				errorMessages = append(errorMessages, "No file submitted")
			} else {
				errorMessages = append(errorMessages, "Error retrieving the file")
			}

			if len(errorMessages) > 0 {
				tmpl.ExecuteTemplate(w, "autherrors", errorMessages)
				return
			}

		}
		defer file.Close()

		// Generate a unique filename to prevent overwriting and conflicts
		uuid, err := uuid.NewRandom()
		if err != nil {
			errorMessages = append(errorMessages, "Error generating unique identifier")
			tmpl.ExecuteTemplate(w, "autherrors", errorMessages)

			return
		}
		filename := uuid.String() + filepath.Ext(handler.Filename) // Append the file extension

		// Create the full path for saving the file
		filePath := filepath.Join("uploads", filename)

		// Save the file to the server
		dst, err := os.Create(filePath)
		if err != nil {
			errorMessages = append(errorMessages, "Error saving the file")
			tmpl.ExecuteTemplate(w, "autherrors", errorMessages)

			return
		}
		defer dst.Close()
		if _, err = io.Copy(dst, file); err != nil {
			errorMessages = append(errorMessages, "Error saving the file")
			tmpl.ExecuteTemplate(w, "autherrors", errorMessages)
			return
		}

		// Update the user's avatar in the database
		
		if err := repository.UpdateUserAvatar(db, userID, filename); err != nil {
			errorMessages = append(errorMessages, "Error updating user avatar")
			tmpl.ExecuteTemplate(w, "autherrors", errorMessages)

			log.Fatal(err)
			return
		}

		//Delete current image from the initial fetch of the user
		if user.Avatar != "" {
			oldAvatarPath := filepath.Join("uploads", user.Avatar)

			//Check if the oldPath is not the same as the new path
			if oldAvatarPath != filePath {
				if err := os.Remove(oldAvatarPath); err != nil {
					fmt.Printf("Warning: failed to delete old avatar file: %s\n", err)
				}
			}
		}

		//Navigate to the profile page after the update
		w.Header().Set("HX-Location", "/")
		w.WriteHeader(http.StatusNoContent)
	}
}